<?php

/**
 * @package CRM
 * @copyright CiviCRM LLC https://civicrm.org/licensing
 *
 * Generated from /home/matthew/buildkit/build/d7master/web/sites/default/files/civicrm/ext/firewall/xml/schema/CRM/Firewall/FirewallIpaddress.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 * (GenCodeChecksum:c9eab4e947184d4fe1b45318587ffe5a)
 */

/**
 * Database access object for the FirewallIpaddress entity.
 */
class CRM_Firewall_DAO_FirewallIpaddress extends CRM_Core_DAO {

  /**
   * Static instance to hold the table name.
   *
   * @var string
   */
  public static $_tableName = 'civicrm_firewall_ipaddress';

  /**
   * Should CiviCRM log any modifications to this table in the civicrm_log table.
   *
   * @var bool
   */
  public static $_log = TRUE;

  /**
   * Unique FirewallIpaddress ID
   *
   * @var int
   */
  public $id;

  /**
   * IP address used
   *
   * @var string
   */
  public $ip_address;

  /**
   * When the IP address accessed
   *
   * @var timestamp
   */
  public $access_date;

  /**
   * The type of event that triggered this log
   *
   * @var string
   */
  public $event_type;

  /**
   * Origin of this access request
   *
   * @var string
   */
  public $source;

  /**
   * Class constructor.
   */
  public function __construct() {
    $this->__table = 'civicrm_firewall_ipaddress';
    parent::__construct();
  }

  /**
   * Returns localized title of this entity.
   */
  public static function getEntityTitle() {
    return ts('Firewall Ipaddresses');
  }

  /**
   * Returns all the column names of this table
   *
   * @return array
   */
  public static function &fields() {
    if (!isset(Civi::$statics[__CLASS__]['fields'])) {
      Civi::$statics[__CLASS__]['fields'] = [
        'id' => [
          'name' => 'id',
          'type' => CRM_Utils_Type::T_INT,
          'description' => CRM_Firewall_ExtensionUtil::ts('Unique FirewallIpaddress ID'),
          'required' => TRUE,
          'where' => 'civicrm_firewall_ipaddress.id',
          'table_name' => 'civicrm_firewall_ipaddress',
          'entity' => 'FirewallIpaddress',
          'bao' => 'CRM_Firewall_DAO_FirewallIpaddress',
          'localizable' => 0,
        ],
        'ip_address' => [
          'name' => 'ip_address',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => CRM_Firewall_ExtensionUtil::ts('IP Address'),
          'description' => CRM_Firewall_ExtensionUtil::ts('IP address used'),
          'required' => TRUE,
          'maxlength' => 255,
          'size' => CRM_Utils_Type::HUGE,
          'where' => 'civicrm_firewall_ipaddress.ip_address',
          'table_name' => 'civicrm_firewall_ipaddress',
          'entity' => 'FirewallIpaddress',
          'bao' => 'CRM_Firewall_DAO_FirewallIpaddress',
          'localizable' => 0,
        ],
        'access_date' => [
          'name' => 'access_date',
          'type' => CRM_Utils_Type::T_TIMESTAMP,
          'title' => CRM_Firewall_ExtensionUtil::ts('Access Date'),
          'description' => CRM_Firewall_ExtensionUtil::ts('When the IP address accessed'),
          'required' => TRUE,
          'where' => 'civicrm_firewall_ipaddress.access_date',
          'default' => 'CURRENT_TIMESTAMP',
          'table_name' => 'civicrm_firewall_ipaddress',
          'entity' => 'FirewallIpaddress',
          'bao' => 'CRM_Firewall_DAO_FirewallIpaddress',
          'localizable' => 0,
        ],
        'event_type' => [
          'name' => 'event_type',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => CRM_Firewall_ExtensionUtil::ts('Event Type'),
          'description' => CRM_Firewall_ExtensionUtil::ts('The type of event that triggered this log'),
          'required' => TRUE,
          'maxlength' => 64,
          'size' => CRM_Utils_Type::BIG,
          'where' => 'civicrm_firewall_ipaddress.event_type',
          'table_name' => 'civicrm_firewall_ipaddress',
          'entity' => 'FirewallIpaddress',
          'bao' => 'CRM_Firewall_DAO_FirewallIpaddress',
          'localizable' => 0,
        ],
        'source' => [
          'name' => 'source',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => CRM_Firewall_ExtensionUtil::ts('Source'),
          'description' => CRM_Firewall_ExtensionUtil::ts('Origin of this access request'),
          'maxlength' => 255,
          'size' => CRM_Utils_Type::HUGE,
          'where' => 'civicrm_firewall_ipaddress.source',
          'table_name' => 'civicrm_firewall_ipaddress',
          'entity' => 'FirewallIpaddress',
          'bao' => 'CRM_Firewall_DAO_FirewallIpaddress',
          'localizable' => 0,
        ],
      ];
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'fields_callback', Civi::$statics[__CLASS__]['fields']);
    }
    return Civi::$statics[__CLASS__]['fields'];
  }

  /**
   * Return a mapping from field-name to the corresponding key (as used in fields()).
   *
   * @return array
   *   Array(string $name => string $uniqueName).
   */
  public static function &fieldKeys() {
    if (!isset(Civi::$statics[__CLASS__]['fieldKeys'])) {
      Civi::$statics[__CLASS__]['fieldKeys'] = array_flip(CRM_Utils_Array::collect('name', self::fields()));
    }
    return Civi::$statics[__CLASS__]['fieldKeys'];
  }

  /**
   * Returns the names of this table
   *
   * @return string
   */
  public static function getTableName() {
    return self::$_tableName;
  }

  /**
   * Returns if this table needs to be logged
   *
   * @return bool
   */
  public function getLog() {
    return self::$_log;
  }

  /**
   * Returns the list of fields that can be imported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &import($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getImports(__CLASS__, 'firewall_ipaddress', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of fields that can be exported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &export($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getExports(__CLASS__, 'firewall_ipaddress', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of indices
   *
   * @param bool $localize
   *
   * @return array
   */
  public static function indices($localize = TRUE) {
    $indices = [
      'index_ip_address' => [
        'name' => 'index_ip_address',
        'field' => [
          0 => 'ip_address',
        ],
        'localizable' => FALSE,
        'sig' => 'civicrm_firewall_ipaddress::0::ip_address',
      ],
    ];
    return ($localize && !empty($indices)) ? CRM_Core_DAO_AllCoreTables::multilingualize(__CLASS__, $indices) : $indices;
  }

}
